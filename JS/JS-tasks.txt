1)
Первый аргумент - массив, второй - колбек-функция, которая применяется на массив
Колбек-функция применяется на каждый элемент массива и проверяет условие
Если хотя бы один раз колбек-функция вернула true, то any возвращает true
Иначе - false

Если колбек-функция не была передана, то из any возвращаем true,
если в массиве есть хотя бы один элемент, который дает true,
если все значения в массиве дают false, то возвращаем false

console.log(any([0, 1, 2, 0], x => x >= 2)); -> true
console.log(any([0, 0, 1, 0])); -> true
console.log(any([0, 0, 0, 0])); -> false


2)
Функция принимает 2 массива.
Возвращает новый массив, который состоит только из тех элементов,
которые встретились в одном массиве, но не встретились в другом

console.log(arrayDiff([1, 2, 3], [1, 2, 4])); -> [3, 4]
console.log(arrayDiff([1, 3, 3, 4], [1, 3, '4'])); -> [4, '4']


3)
Реализовать функцию forEachRight
Первый аргумент - массив, второй - функция, применяется на массив в обратном порядке

Пример:
Результатом работы функции forEachRight,
будет вывод элементов массива в обратном порядке в консоль.
Одно значение - один вывод (построчно)

forEachRight([1, 2, 3, 4], val => console.log(val)); -> в консоль 4 3 2 1


4)
Функция принимает 2 массива, и возвращает массив объединенных значений,
без дублирования

console.log(union([5, 1, 2, 3, 3], [4, 3, 2])); -> [5, 1, 2, 3, 4]
console.log(union([5, 1, 3, 3, 4], [1, 3, 4])); -> [5, 1, 3, 4]



6)
Реализовать функцию without.
Первый аргумент - массив, второй и последующие - значения

Функция возвращает новый массив, который наполнен теми значениями,
которые не передавались как второй и последующие аргументы функции

console.log(without([2, 1, 2, 3], 1, 2)) -> [3]
console.log(without([2, 1, 10, 20, 5], 1, 2, 5)) -> [10, 20]


7)
Реализовать функцию indexOfAll.
Первый аргумент - массив, второй - значение

Функция возвращает массив со всеми индексами, которые соответствуют переданному значению

console.log(indexOfAll([1, 2, 3, 1, 2, 3], 1)); -> [0, 3]
console.log(indexOfAll([1, 2, 3], 4)); -> []


8)
Функция принимает массив meetups,
и возвращает суммарное количество человек, находящихся на активных митапах

membersOnActiveMeetups(meetups); // 1500

Пример:
const meetups = [
  { name: 'JavaScript', isActive: true, members: 100 },
  { name: 'Angular', isActive: true, members: 900 },
  { name: 'Node', isActive: false, members: 600 },
  { name: 'React', isActive: true, members: 500 },
];
membersOnActiveMeetups(meetups); // 1500


9)
const factory = (xValue, yValue, funcSumName) => {
  ...
}
const obj = factory(12, 23, 'myFunc');

console.log(obj.x, obj.y, obj.myFunc()); // 12, 23, 35


10) Написать ф-цию  конструктор объекта. Приведение объекта к примитиву (чит.) (valueOf, toString)
const obj = {
  id: 0,
  name: 'Obj-name',
  // ...
};

console.log(`Name: ${obj}`); 		// Name: Obj-name
console.log(+obj);            		// 0
console.log(obj + 10);        		// 10


11)
Каррирование
add(4)(3)(1) => 8


12)
На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].

Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.

Функция getMaxSubSum(arr) должна возвращать эту сумму.

Например:

getMaxSubSum([-1, 2, 3, -9]) = 5 (сумма выделенных)
getMaxSubSum([2, -1, 2, 3, -9]) = 6
getMaxSubSum([-1, 2, 3, -9, 11]) = 11
getMaxSubSum([-2, -1, 1, 2]) = 3
getMaxSubSum([100, -9, 2, -3, 5]) = 100
getMaxSubSum([1, 2, 3]) = 6 (берём все)
Если все элементы отрицательные – ничего не берём(подмассив пустой) и сумма равна «0»


13)
camelize("background-color") == 'backgroundColor';
camelize("list-style-image") == 'listStyleImage';
camelize("-webkit-transition") == 'WebkitTransition';


14)
Напишите функцию filterRange(arr, a, b), которая принимает массив arr, ищет в нём элементы между a и b и отдаёт массив этих элементов.

Например:

let arr = [5, 3, 8, 1];

let filtered = filterRange(arr, 1, 4);

alert( filtered ); // 3,1


15)
Напишите функцию unique(arr), которая возвращает массив, содержащий только уникальные элементы arr.

Например:

let strings = [‘aaa’, ‘aaa’, ‘zzz’, ‘xxx’, ‘aaa’, ‘bbb’, ‘aaa’,  ‘xxx’, ‘ccc’];

alert( unique(strings) ); // [‘aaa’, ‘zzz’, ‘xxx’, ‘bbb’, ‘ccc’]


16)
Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.


17)
Напишите функцию, которая принимает строку из одного или нескольких слов и возвращает ту же строку, но с перевернутыми словами из X и более букв (X — второй параметр ф-ии).. Переданные строки будут состоять только из букв и пробелов.

Examples:
spinWords( "Hey fellow warriors", 5 ) => returns "Hey wollef sroirraw"
spinWords( "This is a test", 10) => returns "This is a test"
spinWords( "This is another test", 3 )=> returns "sihT is rehtona tset"


18)
filter_list([1,2,'a','b']) == [1,2]
filter_list([1,'a','b',0,15]) == [1,0,15]
filter_list([1,2,'aasf','1','123',123]) == [1,2,123]


19)
Возвести в квадрат каждую цифру числа и соединить их.
Например, если мы запустим 9119 через функцию, выйдет 811181, потому что 92 - это 81, а 12 - 1.
Примечание: функция принимает целое число и возвращает целое число.


20)
Написать функцию persistence, которая принимает положительный параметр num и возвращает число, которое нужно умножить цифры в num, пока не дойдете до единственной цифры.

Примеры:
 persistence(39) === 3 	// because 3*9 = 27, 2*7 = 14, 1*4=4
                       			// and 4 has only one digit

 persistence(999) === 4 	// because 9*9*9 = 729, 7*2*9 = 126,
                        		// 1*2*6 = 12, and finally 1*2 = 2

 persistence(4) === 0 		// because 4 is already a one-digit number


21)
Дан массив единиц и нулей, преобразовать эквивалентное двоичное значение в целое число.
Примеры:

Testing: [0, 0, 0, 1] ==> 1
Testing: [0, 0, 1, 0] ==> 2
Testing: [0, 1, 0, 1] ==> 5
Testing: [1, 0, 0, 1] ==> 9
Testing: [0, 0, 1, 0] ==> 2
Testing: [0, 1, 1, 0] ==> 6
Testing: [1, 1, 1, 1] ==> 15
Testing: [1, 0, 1, 1] ==> 11




24)
Дана строка. Вернуть длину самого короткого слова
Пример:
getLengthOfShortestWord(‘Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.’) 	// => 2



26)
Вернуть средний символ слова. Если длина слова нечетная, вернуть средний символ. Если длина слова четная, вернуть 2 средних символа.

Примеры:
getMiddle("test") 	// should return "es"
getMiddle("testing") 	// should return "t"
getMiddle("middle") 	// should return "dd"
getMiddle("A") 	// should return "A"


27)
Дан массив чисел. Необходимо отсортировать нечетные числа в порядке возрастания, оставив четные числа на их исходных позициях.

Примеры:
[7, 1]  =>  [1, 7]
[5, 8, 6, 3, 4]  =>  [3, 8, 6, 5, 4]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  =>  [1, 8, 3, 6, 5, 4, 7, 2, 9, 0]



29)
Написать функцию, которая возвращает минимальное и максимальное количество заданного списка / массива.

Примеры
minMax([1,2,3,4,5])   == [1,5]
minMax([2334454,5])   == [5, 2334454]
minMax([1])           == [1, 1]


30)
Написать функцию, которая принимает строковый параметр и переворачивает каждое слово в строке. Все пробелы в строке следует сохранить.

Examples
"This is an example!" ==> "sihT si na !elpmaxe"
"double  spaces"      ==> "elbuod  secaps"
